pipeline {
    agent any
    
    environment {
        NODE_VERSION = 'node_23'
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        DB_HOST = 'postgres'
        DB_PORT = '5432'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                    sh 'cd backend'
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                script {
                    sh 'docker network create app-network || true'
                    
                    // Start PostgreSQL container for testing
                    sh '''
                    docker rm -f postgres-test || true
                    docker run -d --name postgres-test \
                      --network app-network \
                      -e POSTGRES_USER=${POSTGRES_USER} \
                      -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                      -e POSTGRES_DB=${POSTGRES_DB} \
                      -p ${DB_PORT}:5432 \
                      postgres:14-alpine
                    '''
                    
                    // Wait for PostgreSQL to be ready
                    sh 'sleep 10'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    // Run unit tests in a Node.js container
                    sh '''
                    docker run --rm \
                      --network app-network \
                      -v $(pwd)/backend:/app \
                      -w /app \
                      -e NODE_ENV=test \
                      -e DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:${DB_PORT}/${POSTGRES_DB} \
                      node:${NODE_VERSION} \
                      sh -c "npm install && npx knex migrate:latest --env test && npx knex seed:run --env test && npm test"
                    '''
                }
            }
            post {
                always {
                    // Cleanup test database
                    sh 'docker rm -f postgres-test || true'
                    
                    // Save test results
                    junit 'backend/test-results.xml || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'cd backend && docker build -f ./Dockerfile -t zelda_backend .'
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        sh 'cd backend && git config user.email "sara.beck.dev@example.com"'
                        sh 'cd backend && git config user.name "Sara"'
                        sh 'cd backend && git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                        sh 'cd backend && git push --tags'
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up resources
            sh 'docker network rm app-network || true'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}