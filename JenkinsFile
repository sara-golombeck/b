pipeline {
    agent any
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        DB_PORT = '5432'
        NODE_VERSION = 'node_23'
    }
    
    tools {
        nodejs NODE_VERSION
    }
    
    stages {
        stage('Cleanup Previous Resources') {
            steps {
                script {
                    sh '''
                    echo "Cleaning up previous resources..."
                    docker ps -a | grep -E "postgres|pg" | awk '{print $1}' | xargs -r docker rm -f || true
                    docker network rm jenkins-network || true
                    '''
                }
            }
        }
        
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Check Repository Contents') {
            steps {
                sh '''
                echo "Contents of repository:"
                ls -la backend
                
                echo "Checking for package.json:"
                find backend -name "package.json"
                
                echo "Checking file permissions:"
                ls -l backend/package.json || echo "package.json not found at expected location"
                '''
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                script {
                    // יצירת רשת דוקר
                    sh 'docker network create jenkins-network || true'
                    
                    // הפעלת PostgreSQL בתוך הרשת
                    sh '''
                    docker run -d --name postgres-test \
                      --network jenkins-network \
                      -e POSTGRES_USER=${POSTGRES_USER} \
                      -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                      -e POSTGRES_DB=${POSTGRES_DB} \
                      postgres:14-alpine
                    '''
                    
                    // זמן המתנה לאתחול PostgreSQL
                    sh 'sleep 15'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    // בדיקה של החיבור למסד הנתונים מתוך קונטיינר דוקר
                    sh '''
                    echo "Testing database connection from Docker..."
                    docker run --rm \
                      --network jenkins-network \
                      postgres:14-alpine \
                      psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:${DB_PORT}/${POSTGRES_DB} -c "SELECT 1"
                    '''
                    
                    // הרצת הבדיקות בדרך שונה - יצירת תיקייה זמנית ברורה
                    sh '''
                    # יצירת תיקייה זמנית עם הרשאות מלאות
                    mkdir -p temp_app
                    cp -R backend/* temp_app/
                    chmod -R 777 temp_app
                    
                    # הרצת הבדיקות עם נפח מפורש ובהרשאות מלאות
                    docker run --rm \
                      --network jenkins-network \
                      -v "$(pwd)/temp_app:/app:Z" \
                      -w /app \
                      -e NODE_ENV=test \
                      -e DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:${DB_PORT}/${POSTGRES_DB} \
                      node:18-alpine \
                      sh -c "ls -la && cat package.json && npm install && npx knex migrate:latest --env test && npx knex seed:run --env test && npm test"
                    '''
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/test-results.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend') {
                        sh 'docker build -f ./Dockerfile -t zelda_backend .'
                    }
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        dir('backend') {
                            sh 'git config user.email "sara.beck.dev@example.com"'
                            sh 'git config user.name "Sara"'
                            sh 'git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                            sh 'git push --tags'
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // ניקוי משאבים
            sh '''
            docker rm -f postgres-test || true
            docker network rm jenkins-network || true
            rm -rf temp_app
            '''
            cleanWs()
        }
    }
}