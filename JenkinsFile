pipeline {
    agent any
    
    tools {
        nodejs 'node_23'
    }
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        POSTGRES_HOST = 'localhost'
        POSTGRES_PORT = '5432'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Check PostgreSQL Service') {
            steps {
                script {
                    // בדוק אם PostgreSQL פעיל באמצעות פקודות בסיסיות
                    sh '''
                        echo "בודק שירות PostgreSQL..."
                        # נסה להתחבר ישירות במקום לבדוק אם הפורט פתוח
                        if PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -c "SELECT 1" > /dev/null 2>&1; then
                            echo "PostgreSQL פעיל וניתן להתחבר אליו"
                        else
                            echo "אזהרה: לא ניתן להתחבר ל-PostgreSQL. בודק אם צריך להקים מיכל..."
                            
                            # נסה להפעיל מיכל docker חדש
                            echo "מנסה להפעיל מיכל PostgreSQL..."
                            if docker run -d --name postgres-test \
                                -e POSTGRES_USER=${POSTGRES_USER} \
                                -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                                -e POSTGRES_DB=${POSTGRES_DB} \
                                -p ${POSTGRES_PORT}:5432 \
                                postgres:12; then
                                
                                echo "נוצר מיכל PostgreSQL חדש. ממתין לאתחול..."
                                sleep 15
                            else
                                echo "הפורט ${POSTGRES_PORT} כנראה תפוס אבל לא ניתן להתחבר. בדוק את התצורה."
                                exit 1
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Database Connection') {
            steps {
                script {
                    // בדוק את החיבור לבסיס הנתונים
                    sh '''
                        echo "בודק חיבור PostgreSQL..."
                        PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -c "SELECT 1 as connection_test;"
                        
                        # בדוק אם בסיס הנתונים קיים
                        if ! PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -lqt | grep -q ${POSTGRES_DB}; then
                            echo "יוצר בסיס נתונים ${POSTGRES_DB}..."
                            PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -c "CREATE DATABASE ${POSTGRES_DB};"
                        else
                            echo "בסיס הנתונים ${POSTGRES_DB} כבר קיים"
                        fi
                    '''
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    
                    // עדכן את מחרוזת החיבור להשתמש בשרת PostgreSQL
                    sh '''
                        sed -i "s|postgres:postgres@db:5432|${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}|g" knexfile.js
                    '''
                    
                    // הצג את מחרוזת החיבור המעודכנת
                    sh 'grep -n "connection:" knexfile.js || echo "לא נמצאה מחרוזת חיבור"'
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('backend') {
                    withEnv(['NODE_ENV=test', 'KEY=zelda-test-secret-key']) {
                        // הדפס מידע סביבתי
                        sh '''
                            echo "גרסת Node: $(node -v)"
                            echo "תיקייה נוכחית: $(pwd)"
                        '''
                        
                        // הרץ את הבדיקות עם timeout מוגדל
                        sh 'NODE_ENV=test mocha --exit --timeout 30000'
                    }
                }
            }
            post {
                success {
                    echo 'כל הבדיקות עברו בהצלחה!'
                }
                failure {
                    echo 'הבדיקות נכשלו! בדוק את הלוגים לפרטים נוספים.'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -f ./Dockerfile -t zelda_backend .'
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        sh 'git config user.email "sara.beck.dev@example.com"'
                        sh 'git config user.name "Sara"'
                        sh 'git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                        sh 'git push --tags'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'הפייפליין הושלם'
        }
    }
}