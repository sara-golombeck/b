pipeline {
    agent any
    
    tools {
        nodejs 'node_23'
    }
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        POSTGRES_TEST_CONTAINER = 'postgres-zelda-test'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Setup Test Database') {
            steps {
                script {
                    // Check if the container exists and is running
                    def containerExists = sh(script: "docker ps -a -q -f name=${POSTGRES_TEST_CONTAINER}", returnStdout: true).trim()
                    def containerRunning = sh(script: "docker ps -q -f name=${POSTGRES_TEST_CONTAINER}", returnStdout: true).trim()
                    
                    if (!containerExists) {
                        echo "Creating new PostgreSQL container"
                        sh """
                            docker run -d --name ${POSTGRES_TEST_CONTAINER} \
                            -e POSTGRES_USER=${POSTGRES_USER} \
                            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                            -e POSTGRES_DB=${POSTGRES_DB} \
                            -p 5432:5432 \
                            postgres:12
                        """
                        // Give the database time to initialize
                        sh 'sleep 15'
                    } else if (!containerRunning) {
                        echo "Starting existing PostgreSQL container"
                        sh "docker start ${POSTGRES_TEST_CONTAINER}"
                        sh 'sleep 5'
                    } else {
                        echo "PostgreSQL container is already running"
                    }
                    
                    // Reset test database
                    sh """
                        docker exec ${POSTGRES_TEST_CONTAINER} psql -U ${POSTGRES_USER} -c 'DROP DATABASE IF EXISTS ${POSTGRES_DB};'
                        docker exec ${POSTGRES_TEST_CONTAINER} psql -U ${POSTGRES_USER} -c 'CREATE DATABASE ${POSTGRES_DB};'
                    """
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('backend') {
                    // Use cached npm modules when possible
                    sh 'npm install'
                    // Update connection to use host.docker.internal for Docker-to-Docker communication
                    sh '''
                        sed -i 's/postgres:postgres@db:5432/postgres:postgres@localhost:5432/g' knexfile.js
                    '''
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('backend') {
                    withEnv(['NODE_ENV=test', 'KEY=test-secret-key']) {
                        sh 'npm test'
                    }
                }
            }
            post {
                success {
                    echo 'All tests passed!'
                }
                failure {
                    echo 'Tests failed!'
                }
            }
        }
        
        // המשך שלבי הפייפליין...
    }
}