pipeline {
    agent any
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        DB_PORT = '5432'
        NODE_VERSION = 'node_23'
    }
    
    tools {
        nodejs NODE_VERSION
    }
    
    stages {
        stage('Cleanup Previous Resources') {
            steps {
                script {
                    sh '''
                    echo "Cleaning up previous resources..."
                    docker ps -a | grep -E "postgres|pg" | awk '{print $1}' | xargs -r docker rm -f || true
                    docker network rm jenkins-network || true
                    '''
                }
            }
        }
        
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Check Directory Structure') {
            steps {
                script {
                    sh '''
                    echo "Checking directory structure..."
                    ls -la
                    echo "Contents of backend directory:"
                    ls -la backend
                    echo "Looking for package.json:"
                    find . -name "package.json"
                    '''
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                script {
                    // יצירת רשת דוקר
                    sh 'docker network create jenkins-network || true'
                    
                    // הפעלת PostgreSQL בתוך הרשת
                    sh '''
                    docker run -d --name postgres-test \
                      --network jenkins-network \
                      -e POSTGRES_USER=${POSTGRES_USER} \
                      -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                      -e POSTGRES_DB=${POSTGRES_DB} \
                      postgres:14-alpine
                    '''
                    
                    // זמן המתנה לאתחול PostgreSQL
                    sh 'sleep 15'
                    
                    // בדיקת שהקונטיינר עובד
                    sh 'docker ps | grep postgres-test'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    // בדיקה של החיבור למסד הנתונים מתוך קונטיינר דוקר
                    sh '''
                    echo "Testing database connection from Docker..."
                    docker run --rm \
                      --network jenkins-network \
                      postgres:14-alpine \
                      psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:${DB_PORT}/${POSTGRES_DB} -c "SELECT 1"
                    '''
                    
                    // הרצת הבדיקות בתוך קונטיינר דוקר שמחובר לאותה רשת
                    // מעבר על כל הנתיבים האפשריים למציאת ה-package.json
                    sh '''
                    for APP_PATH in "${WORKSPACE}/backend" "${WORKSPACE}"
                    do
                      echo "Trying path: $APP_PATH"
                      if [ -f "$APP_PATH/package.json" ]; then
                        echo "Found package.json in $APP_PATH"
                        
                        docker run --rm \
                          --network jenkins-network \
                          -v "$APP_PATH:/app" \
                          -w /app \
                          -e NODE_ENV=test \
                          -e DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:${DB_PORT}/${POSTGRES_DB} \
                          node:18-alpine \
                          sh -c "npm install && npx knex migrate:latest --env test && npx knex seed:run --env test && npm test"
                          
                        # אם הצלחנו להגיע לכאן, הפעולה הצליחה
                        exit 0
                      fi
                    done
                    
                    # אם הגענו לכאן, לא מצאנו את package.json
                    echo "ERROR: Could not find package.json in any expected location"
                    exit 1
                    '''
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/test-results.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    if [ -f "${WORKSPACE}/backend/Dockerfile" ]; then
                      cd ${WORKSPACE}/backend
                    elif [ -f "${WORKSPACE}/Dockerfile" ]; then
                      cd ${WORKSPACE}
                    else
                      echo "Could not find Dockerfile"
                      exit 1
                    fi
                    
                    docker build -f ./Dockerfile -t zelda_backend .
                    '''
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        sh '''
                        if [ -d "${WORKSPACE}/backend/.git" ]; then
                          cd ${WORKSPACE}/backend
                        elif [ -d "${WORKSPACE}/.git" ]; then
                          cd ${WORKSPACE}
                        else
                          echo "Could not find .git directory"
                          exit 1
                        fi
                        
                        git config user.email "sara.beck.dev@example.com"
                        git config user.name "Sara"
                        git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"
                        git push --tags
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // ניקוי משאבים
            sh '''
            docker rm -f postgres-test || true
            docker network rm jenkins-network || true
            '''
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}