pipeline {
    agent any
    
    tools {
        nodejs 'node_23'
    }
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Setup Test Database') {
            steps {
                script {
                    // Stop and remove any existing postgres container
                    sh 'docker rm -f postgres-test || true'
                    
                    // Start a PostgreSQL container for testing
                    sh '''
                        docker run -d --name postgres-test \
                        -e POSTGRES_USER=${POSTGRES_USER} \
                        -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                        -e POSTGRES_DB=${POSTGRES_DB} \
                        -p 5432:5432 \
                        postgres:12
                    '''
                    
                    // Give the database a few seconds to start up
                    sh 'sleep 10'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    // Update the knexfile.js for testing to point to the local postgres container
                    sh '''
                        sed -i 's/postgres:postgres@db:5432/postgres:postgres@localhost:5432/g' knexfile.js
                    '''
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('backend') {
                    withEnv(['NODE_ENV=test', 'KEY=test-secret-key']) {
                        sh 'npm test'
                    }
                }
            }
            post {
                success {
                    echo 'All tests passed!'
                }
                failure {
                    echo 'Tests failed!'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -f ./Dockerfile -t zelda_backend .'
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        sh 'git config user.email "sara.beck.dev@example.com"'
                        sh 'git config user.name "Sara"'
                        sh 'git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                        sh 'git push --tags'
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up the PostgreSQL container
            sh 'docker rm -f postgres-test || true'
            cleanWs()
        }
    }
}