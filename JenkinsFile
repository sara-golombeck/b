pipeline {
    agent any
    
    tools {
        nodejs 'node_23'
    }
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Setup Database') {
            steps {
                script {
                    // Stop any existing container
                    sh 'docker rm -f postgres-test || true'
                    
                    // Start a new PostgreSQL container
                    sh '''
                        docker run -d --name postgres-test \
                            -e POSTGRES_USER=postgres \
                            -e POSTGRES_PASSWORD=postgres \
                            -e POSTGRES_DB=zelda_cookbook \
                            -p 5432:5432 \
                            postgres:12
                            
                        # Wait for PostgreSQL to start
                        sleep 15
                    '''
                }
            }
        }
        
        stage('Verify Database Connection') {
            steps {
                script {
                    // Install PostgreSQL client if needed
                    sh 'which psql || apt-get update && apt-get install -y postgresql-client'
                    
                    // Check if PostgreSQL container is running
                    sh 'docker ps | grep postgres-test'
                    
                    // Check if PostgreSQL is accepting connections
                    sh '''
                        echo "Checking PostgreSQL connection..."
                        PGPASSWORD=postgres psql -h localhost -U postgres -c "SELECT 1 as connection_test;"
                        
                        echo "Checking zelda_cookbook database..."
                        PGPASSWORD=postgres psql -h localhost -U postgres -c "\\l" | grep zelda_cookbook
                    '''
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    
                    // Show current connection string
                    sh 'grep -n "connection:" knexfile.js'
                    
                    // Update connection string to use localhost
                    sh '''
                        sed -i 's/postgres:postgres@db:5432/postgres:postgres@localhost:5432/g' knexfile.js
                    '''
                    
                    // Show updated connection string
                    sh 'grep -n "connection:" knexfile.js'
                    
                    // Modify package.json to use longer timeout
                    sh '''
                        sed -i 's/"test": "NODE_ENV=test mocha --exit"/"test": "NODE_ENV=test mocha --exit --timeout 30000"/g' package.json
                    '''
                    
                    // Show updated test script
                    sh 'grep -n "test" package.json'
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                dir('backend') {
                    withEnv(['NODE_ENV=test', 'KEY=zelda-test-secret-key']) {
                        // Print environment information
                        sh '''
                            echo "Node version: $(node -v)"
                            echo "NPM version: $(npm -v)"
                            echo "Current directory: $(pwd)"
                            echo "NODE_ENV: $NODE_ENV"
                            echo "KEY: $KEY"
                        '''
                        
                        // Run tests with explicit timeout parameter
                        sh 'NODE_ENV=test mocha --exit --timeout 30000'
                    }
                }
            }
            post {
                success {
                    echo 'All tests passed!'
                }
                failure {
                    echo 'Tests failed! Check the logs for details.'
                    
                    // Diagnostic information on failure
                    sh '''
                        echo "Docker container status:"
                        docker ps -a | grep postgres
                        
                        echo "Connection test:"
                        PGPASSWORD=postgres psql -h localhost -U postgres -c "SELECT 1;" || echo "Connection failed"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -f ./Dockerfile -t zelda_backend .'
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        sh 'git config user.email "sara.beck.dev@example.com"'
                        sh 'git config user.name "Sara"'
                        sh 'git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                        sh 'git push --tags'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed'
            
            // Optional: clean up database container
            // sh 'docker rm -f postgres-test || true'
        }
    }
}