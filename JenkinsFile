pipeline {
    agent any
    
    environment {
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        POSTGRES_DB = 'zelda_cookbook'
        DB_PORT = '5432'
        NODE_VERSION = 'node_23'
    }
    
    tools {
        nodejs NODE_VERSION
    }
    
    stages {
        stage('Cleanup Previous Resources') {
            steps {
                script {
                    sh '''
                    echo "Cleaning up previous resources..."
                    docker ps -a | grep -E "postgres|pg" | awk '{print $1}' | xargs -r docker rm -f || true
                    docker network rm app-network || true
                    '''
                }
            }
        }
        
        stage('Clone Repository') {
            steps {
                sshagent(['github']) {
                    sh 'rm -rf backend'
                    sh 'git clone git@github.com:le7-devops/backend.git'
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                script {
                    // בדוק אם הקובץ knexfile.js צריך עדכון
                    sh '''
                    cd backend
                    # עדכן את קובץ ה-knexfile.js זמנית עבור בדיקות
                    cp knexfile.js knexfile.js.bak
                    cat knexfile.js.bak | sed "s|postgres://postgres:postgres@db:5432/zelda_cookbook|postgres://postgres:postgres@host.docker.internal:5432/zelda_cookbook|g" > knexfile.js
                    cat knexfile.js
                    '''
                    
                    // Start PostgreSQL container
                    sh '''
                    docker run -d --name postgres-test \
                      -e POSTGRES_USER=${POSTGRES_USER} \
                      -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                      -e POSTGRES_DB=${POSTGRES_DB} \
                      -p ${DB_PORT}:${DB_PORT} \
                      postgres:14-alpine
                    '''
                    
                    // Wait for PostgreSQL to be ready
                    sh 'sleep 15'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    dir('backend') {
                        sh '''
                        echo "Running tests with Node.js version:"
                        node --version
                        npm --version
                        
                        # התקן את התלויות
                        npm install
                        
                        # בדוק את החיבור למסד הנתונים
                        echo "Testing database connection..."
                        
                        # הגדר משתנה סביבה עבור מסד הנתונים
                        export NODE_ENV=test
                        export DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:${DB_PORT}/${POSTGRES_DB}
                        
                        # הרץ מיגרציות וטען נתונים לבדיקות
                        echo "Running migrations..."
                        npx knex migrate:latest --env test
                        
                        echo "Running seeds..."
                        npx knex seed:run --env test
                        
                        # הרץ את בדיקות היחידה
                        echo "Running tests..."
                        npm test
                        '''
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'backend/test-results.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend') {
                        // החזר את קובץ ה-knexfile המקורי אם שונה
                        sh '''
                        if [ -f knexfile.js.bak ]; then
                          mv knexfile.js.bak knexfile.js
                        fi
                        '''
                        
                        sh 'docker build -f ./Dockerfile -t zelda_backend .'
                    }
                }
            }
        }
        
        stage('Login to GHCR and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ghcr-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u le7-devops --password-stdin'
                        sh 'docker tag zelda_backend ghcr.io/le7-devops/backend:latest'
                        sh 'docker push ghcr.io/le7-devops/backend:latest'
                    }
                }
            }
        }
        
        stage('Push Version to Git') {
            steps {
                sshagent(['github']) {
                    script {
                        dir('backend') {
                            sh 'git config user.email "sara.beck.dev@example.com"'
                            sh 'git config user.name "Sara"'
                            sh 'git tag -a v$(date +"%Y%m%d%H%M%S") -m "Automated version update"'
                            sh 'git push --tags'
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
            docker rm -f postgres-test || true
            if [ -f backend/knexfile.js.bak ]; then
              mv backend/knexfile.js.bak backend/knexfile.js
            fi
            '''
            cleanWs()
        }
    }
}